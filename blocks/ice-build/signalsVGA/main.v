// Code generated by Icestudio 0.11.3w202403120303202403120303202403120303202403120303202403120303202403120303202403120303202403120303202403120303202403120303202403120303

`default_nettype none

//---- Top entity
module main (
 input v7dbbbb,
 output [9:0] v8a68e1,
 output [9:0] vf3ae84,
 output v83ac33,
 output vcbba55,
 output v501546,
 output v501a96,
 output v7ab3fe,
 output v4f8d33,
 output va8ebb1,
 output vde30a6,
 output v40212f,
 output v24ed28,
 output v535766
);
 wire w0;
 wire w1;
 wire w2;
 wire [0:9] w3;
 wire [0:9] w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 assign vcbba55 = w0;
 assign v83ac33 = w1;
 assign v501546 = w2;
 assign v8a68e1 = w3;
 assign vf3ae84 = w4;
 assign w5 = v7dbbbb;
 assign va8ebb1 = w6;
 assign v40212f = w7;
 assign vde30a6 = w8;
 assign v24ed28 = w9;
 assign v501a96 = w10;
 assign v7ab3fe = w11;
 assign v4f8d33 = w12;
 assign v535766 = w13;
 main_vb4a5e4 vb4a5e4 (
  .vsync(w0),
  .hsync(w1),
  .activevideo(w2),
  .x_px(w3),
  .y_px(w4),
  .px_clk(w5),
  .activeLineStart(w6),
  .activeFrameStart(w7),
  .activeLineEnd(w8),
  .activeFrameEnd(w9),
  .lineStart(w10),
  .lineEnd(w11),
  .frameStart(w12),
  .frameEnd(w13)
 );
endmodule

//---------------------------------------------------
//-- VGASyncGen
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- VGA synchronism generator.
//---------------------------------------------------

module main_vb4a5e4 (
 input px_clk,
 output [9:0] x_px,
 output [9:0] y_px,
 output hsync,
 output vsync,
 output activevideo,
 output activeLineStart,
 output activeLineEnd,
 output activeFrameStart,
 output activeFrameEnd,
 output lineStart,
 output lineEnd,
 output frameStart,
 output frameEnd
);
 
 // Constants.
 parameter activeHvideo = 640;               // Width of visible pixels.
 parameter activeVvideo =  480;              // Height of visible lines.
 parameter hfp = 16;                         // Horizontal front porch length.
 parameter hpulse = 96;                     // Hsync pulse length.
 parameter hbp = 48;                         // Horizontal back porch length.
 parameter vfp = 10;                         // Vertical front porch length.
 parameter vpulse = 2;                       // Vsync pulse length.
 parameter vbp = 33;                         // Vertical back porch length.
 parameter blackH = hfp + hpulse + hbp;      // Hide pixels in one line.
 parameter blackV = vfp + vpulse + vbp;      // Hide lines in one frame.
 parameter hpixels = blackH + activeHvideo;  // Total horizontal pixels.
 parameter vlines = blackV + activeVvideo;   // Total lines.
 
 // Registers for storing the horizontal & vertical counters.
 reg [10:0] hc;
 reg [10:0] vc;
 
 reg [9:0] x_pxi;          // X position for actual pixel.
 reg [9:0] y_pxi;          // Y position for actual pixel.
 
 // Counting pixels.
 always @(posedge px_clk)
 begin
     // Keep counting until the end of the line.
     if (hc < hpixels - 1)
         hc <= hc + 1;
     else
     // When we hit the end of the line, reset the horizontal
     // counter and increment the vertical counter.
     // If vertical counter is at the end of the frame, then
     // reset that one too.
     begin
         hc <= 0;
         if (vc < vlines - 1)
            vc <= vc + 1;
         else
            vc <= 0;
     end
  end
 
 // Generate sync pulses (active low) and active video.
 assign hsync = (hc >= hfp && hc < hfp + hpulse) ? 0:1;
 assign vsync = (vc >= vfp && vc < vfp + vpulse) ? 0:1;
 assign activevideo = (hc >= blackH && vc >= blackV) ? 1:0;
 
 assign activeLineStart = (hc == blackH ) ? 1 : 0;
 assign activeLineEnd = (hc == blackH ) ? 1 : 0;
 
 assign activeFrameStart = (hc == blackH ) ? 1 : 0;
 assign activeFrameEnd = (hc == blackH ) ? 1 : 0;
 
 assign lineStart = (hc == blackH ) ? 1 : 0;
 assign lineEnd = (hc == blackH ) ? 1 : 0;
 
 assign frameStart = (hc == blackH ) ? 1 : 0;
 assign frameEnd = (hc == blackH ) ? 1 : 0;
 
 // assign endline = (hc == hpixels-1) ? 1'b1 : 1'b0;
 // assign endframe = (hc == hpixels-1 && vc == vlines-1) ? 1'b1 : 1'b0;
 
 // Generate new pixel position.
 always @(posedge px_clk)
 begin
     // First check if we are within vertical active video range.
     if (activevideo)
     begin
         x_pxi <= hc - blackH;
         y_pxi <= vc - blackV;
     end
     else
     // We are outside active video range so initial position it's ok.
     begin
         x_pxi <= 0;
         y_pxi <= 0;
     end
  end
  
  assign  x_px = x_pxi;
  assign y_px = y_pxi;
 
 //endmodule
endmodule
